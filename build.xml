
<project name="jetbrains.teamcity.plugin" basedir="." default="deploy">

    <property file="build.properties" />

    <target name="clean">
        <delete dir="${tool.home}/bin" failonerror="false" quiet="true" />
        <delete dir="${tmp}" failonerror="false" quiet="true" />
        <delete dir="${plugin.build.libs}" failonerror="false" quiet="true" />

        <!--delete includeemptydirs="true" quiet="true" failonerror="false">
			<fileset dir="${tool.home}/bin">
				<include name="**/**"/>
			</fileset>
		</delete>
		<delete includeemptydirs="true" quiet="true" failonerror="false">
			<fileset dir="${tmp}">
				<include name="**/**"/>
			</fileset>
		</delete>
		<delete includeemptydirs="true" quiet="true" failonerror="false">
			<fileset dir="${plugin.build.libs}">
				<include name="**/**" />
			</fileset>
		</delete-->
    </target>

    <target name="clean-dist">
        <delete dir="${dist-commandline}" failonerror="false" quiet="true" />
        <!--delete includeemptydirs="true" quiet="true" failonerror="false">
			<fileset dir="${dist-commandline}">
				<include name="**/**"/>
			</fileset>
		</delete-->
    </target>

    <path id="tool.classpath">
        <dirset dir="${tmp}/bin">
        </dirset>
    </path>

    <target name="compile" depends="prepare-version, prepare-bundle-lib">

        <echo file="${tool.home}/java/com/jetbrains/teamcity/Build.java">package com.jetbrains.teamcity;

public class Build {
    public static final String build = "${build.number}";
}</echo>

        <javac destdir="${tmp}/bin" debug="on" target="1.5"  excludes="jetbrains/buildServer/tools/**,jetbrains/buildServer/core/runtime/osgx/**">
            <src path="${tool.home}/java" />
        </javac>
        <copy todir="${tmp}/bin">
            <fileset dir="${tool.home}/java">
                <include name="**/?*.properties" />
            </fileset>
        </copy>
        <copy todir="${tmp}/scripts">
            <fileset dir="${tool.home}/scripts">
                <include name="**/*.*" />
            </fileset>
        </copy>

    </target>

    <target name="build" depends="compile">

        <mkdir dir="${tmp}" />

        <copy file="${tool.home}/META-INF/MANIFEST.MF" tofile="${tmp}/MANIFEST.MF" />
        <copy file="${tool.home}/log4j.properties" tofile="${tmp}/bin/log4j.properties" />

        <jar destfile="${tmp}/${product.name}.jar" manifest="${tmp}/MANIFEST.MF">
            <fileset dir="${tmp}/bin">
                <include name="**/**" />
            </fileset>
            <fileset dir="${tmp}/scripts">
                <include name="**/**" />
            </fileset>
        </jar>

    </target>

    <target name="deploy" depends="clean,build,clean-dist,create-plugin">
        <mkdir dir="${dist-commandline}" />

        <copy todir="${dist-commandline}">
            <fileset dir="${tmp}">
                <!--include name="*.jar"/-->
                <include name="*.zip" />
            </fileset>
        </copy>

        <!--antcall target="clean" /-->
    </target>

    <target name="create-plugin" depends="clean-plugin,build-plugin">

    </target>

    <target name="clean-plugin">
        <delete includeemptydirs="true" quiet="true" failonerror="false">
            <fileset dir="${basedir}/server-side/tmp">
                <include name="**/**" />
            </fileset>
        </delete>
    </target>

    <path id="command.line.libs">
        <fileset dir="${plugin.build.libs}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <target name="build-plugin" depends="prepare-version">

        <mkdir dir="${basedir}/server-side/tmp" />

        <javac destdir="${basedir}/server-side/tmp" debug="on" target="1.8">
            <src path="${basedir}/server-side/src" />
            <classpath refid="command.line.libs" />
        </javac>

        <copy todir="${basedir}/server-side/tmp/buildServerResources">
            <fileset dir="${basedir}/server-side/resources/buildServerResources">
                <include name="**/*.*" />
            </fileset>
        </copy>

        <mkdir dir="${basedir}/server-side/tmp/META-INF" />
        <copy todir="${basedir}/server-side/tmp/META-INF">
            <fileset dir="${basedir}/server-side/src/META-INF">
                <include name="**/*.*" />
            </fileset>
        </copy>

        <copy file="${tmp}/tcc.jar" todir="${basedir}/server-side/tmp/buildServerResources" />

        <mkdir dir="${tmp}/server" />
        <jar destfile="${tmp}/server/command.line.jar">
            <fileset dir="${basedir}/server-side/tmp">
                <include name="**/**" />
            </fileset>
        </jar>

        <zip destfile="${tmp}/command.line.zip">
            <fileset dir="${tmp}">
                <include name="server/command.line.jar" />
            </fileset>
            <fileset dir="${basedir}/server-side">
                <include name="teamcity-plugin.xml" />
            </fileset>

        </zip>


    </target>

    <target name="prepare-version">
        <condition property="build.number" value="SNAPSHOT" else="${build.number}">
            <not>
                <isset property="build.number"/>
            </not>
        </condition>

        <filter token="Plugin_Version" value="${build.number}"/>
        <filter token="Plugin_Vendor" value="JetBrains"/>
        <filter token="Plugin_Vendor_Url" value="http://www.jetbrains.com"/>
        <copy file="${basedir}/server-side/teamcity-plugin-dist.xml"
              tofile="${basedir}/server-side/teamcity-plugin.xml"
              overwrite="true"
              filtering="true"/>
    </target>

    <target name="dist" depends="deploy" />

    <target name="test" depends="test-plugin,test-tcc-jar">
        <ant dir="${tests.project.path}" inheritall="yes" inheritrefs="yes" target="test" />
    </target>

    <target name="test-tcc-jar" depends="build">

        <echo>
            Skipping testing tcc jar (TODO: fix)
        </echo>

        <!--java jar="tmp/tcc.jar"
              inputstring="\n"
              failonerror="true"
              args="login --host 'http://teamcity.jetbrains.com' --user guest"
              fork='true'/>

        <java jar="tmp/tcc.jar"
              failonerror="true"
              args="logout --host 'http://teamcity.jetbrains.com'"
              fork='true'/-->
    </target>

    <target name="test-plugin">

    </target>

    <target name="prepare-artifacts" description="Extract libraries from TeamCity distribution">

        <!-- unpack existing destributive-->
        <untar compression="gzip" dest="${distribution.dir}">
            <fileset dir="${distribution.dir}">
                <include name="*.tar.gz" />
            </fileset>
        </untar>

        <mkdir dir="${plugin.build.libs}" />

        <!-- copy all required libraries from the unpacked distr -->
        <copy todir="${plugin.build.libs}">
            <fileset dir="${distribution.dir}/TeamCity/webapps/ROOT/WEB-INF/lib">
                <include name="*.jar" />
            </fileset>
        </copy>
        <copy todir="${plugin.build.libs}">
            <fileset dir="${distribution.dir}/TeamCity/lib">
                <include name="*.jar" />
            </fileset>
        </copy>

        <mkdir dir="${tmp}/eclipse-plugin" />
        <unzip dest="${tmp}/eclipse-plugin" overwrite="yes" src="${distribution.dir}/TeamCity/webapps/ROOT/WEB-INF/plugins/eclipse-plugin-distributor.zip"/>

        <!-- unjar eclipse's plugin bundled libs -->
        <unjar dest="${plugin.build.libs}" overwrite="yes">
            <fileset dir="${tmp}/eclipse-plugin/update-site/plugins">
                <include name="**/jetbrains.teamcity.core_*.jar" />
            </fileset>
            <patternset>
                <include name="**/lib/ide-common.jar" />
            </patternset>
        </unjar>
        <move todir="${plugin.build.libs}">
            <fileset dir="${plugin.build.libs}/lib">
                <include name="**/*.jar" />
            </fileset>
        </move>

    </target>


    <target name="prepare-bundle-lib" depends="prepare-artifacts" description="Bundle classes used by the plugin">

        <mkdir dir="${tmp}/bin" />
        <property name="libs" location="${tmp}/bin" />
        <mkdir dir="${libs}" />

        <!-- will extract all libs content for bundling -->
        <unjar src="${plugin.build.libs}/annotations.jar" dest="${libs}" overwrite="yes" />

        <unjar src="${plugin.build.libs}/openapi.jar" dest="${libs}" overwrite="yes" >
            <patternset>
              <include name="com/intellij/openapi/diagnostic/*.class"/>
              <include name="com/intellij/openapi/util/**/*.class"/>
              <include name="com/intellij/util/*.class"/>
            </patternset>
        </unjar>

        <unjar src="${plugin.build.libs}/ide-common.jar" dest="${libs}" overwrite="yes" />

        <unjar src="${plugin.build.libs}/common-api.jar" dest="${libs}" overwrite="yes" />
        <unjar src="${plugin.build.libs}/serviceMessages.jar" dest="${libs}" overwrite="yes" />
        <unjar src="${plugin.build.libs}/runtime-util.jar" dest="${libs}" overwrite="yes" />

        <unjar src="${plugin.build.libs}/commons-codec.jar" dest="${libs}" overwrite="yes" />
        <unjar src="${plugin.build.libs}/commons-httpclient-3.1.jar" dest="${libs}" overwrite="yes" />
        <unjar src="${plugin.build.libs}/commons-logging.jar" dest="${libs}" overwrite="yes" />
        <unjar src="${plugin.build.libs}/log4j-1.2.12.jar" dest="${libs}" overwrite="yes" />
        <unjar src="${plugin.build.libs}/jdom.jar" dest="${libs}" overwrite="yes" />
	
        <unjar dest="${libs}" overwrite="yes">
            <fileset dir="${plugin.build.libs}">
                <include name="**/xmlrpc-*.jar" />
            </fileset>
        </unjar> 
        <unjar dest="${libs}" overwrite="yes">
            <fileset dir="${plugin.build.libs}">
                <include name="**/xpp3*.jar" />
            </fileset>
        </unjar>
        <unjar dest="${libs}" overwrite="yes">
            <fileset dir="${plugin.build.libs}">
                <include name="**/xstream-*.jar" />
            </fileset>
        </unjar>
    </target>

</project>


